server:
  port: 8765

spring:
  application:
    name: gr-oauth2-swagger-aggregator

eureka.fetch.seconds: 30
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  # Rafraîchir le registre toutes les X secondes
    registry-fetch-interval-seconds: ${eureka.fetch.seconds}
  instance:
    metadata-map:
      # Indique que ce microservice doit être inclus dans le swagger de 'gr-conf-swagger-aggregator'' (désactiver le sinon sinon).
      swagger.aggregator.enabled: true # ${aggregator.eureka.enabled}

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    disable-swagger-default-url: true
    display-request-duration: true
    operations-sorter: alpha
    # Activer le mode "try it out" pour tous les endpoints
    try-it-out-enabled: true
    api-docs:
      path: /v3/api-docs
      enabled: true
    oauth:
      clientId: client1
      clientSecret: secret1
      usePkceWithAuthorizationCodeGrant: false
    extraScripts:
      - /static/custom-swagger.js
    groups-order: DESC
  api-docs:
    groups:
      enabled: true

app:
  openapi:
    local-url: http://localhost:${server.port}
    dev-url: http://10.0.0.137:${server.port}
    homol-url: http://10.0.0.500:${server.port}
    prod-url: https://10.0.0.600:${server.port}

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.springframework.web.cors: DEBUG